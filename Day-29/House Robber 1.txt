// class Solution {
//     public int rob(int[] nums) {
//         return solve(0,nums);
//     }
//     public int solve(int id,int[] nums){
//         if(id>=nums.length){
//             return 0;
//         }

//         int take = nums[id] + solve(id+2,nums);
//         int notTake = solve(id+1,nums);
//         return Math.max(take, notTake);
//     }
// }



class Solution {

    public static int solution(int n, int[]nums, int[] dp){
        dp[0] = nums[0];

        for(int i=1;i<n;i++){
            int take = nums[i];
            if(i>1){
                take += dp[i-2];
            }
            int notTake = 0 + dp[i-1];
            dp[i] = Math.max(take, notTake);
        }

        return dp[n-1];
    }
    public int rob(int[] nums) {
        int n = nums.length;
        int dp[] = new int[n+1];
        Arrays.fill(dp,0);

        return(solution(n,nums,dp));
    }
}