// import java.util.ArrayList;

// class Solution {

//     public int helperRobber(ArrayList<Integer> valueInHouse, int index) {
//         if (index >= valueInHouse.size()) {
//             return 0;
//         }

//         int cur = Math.max(valueInHouse.get(index) + helperRobber(valueInHouse, index + 2), helperRobber(valueInHouse, index + 1));
//         return cur;
//     }

//     public int rob(int[] nums) {
//         int n = nums.length;
//         if (n == 1) {
//             return nums[0];
//         }

//         ArrayList<Integer> arr1 = new ArrayList<>();
//         ArrayList<Integer> arr2 = new ArrayList<>();

//         for (int i = 0; i < n; i++) {
//             if (i != 0) arr1.add(nums[i]);
//             if (i != n - 1) arr2.add(nums[i]);
//         }

//         int result1 = helperRobber(arr1, 0);
//         int result2 = helperRobber(arr2, 0);

//         return Math.max(result1, result2);
//     }
// }

class Solution {
	public int helperRobber(ArrayList<Integer> valueInHouse){
		int prev = valueInHouse.get(0);
		int prev2 = 0;

		for(int i = 1; i < valueInHouse.size(); i++){
			int cur = Math.max(valueInHouse.get(i) + prev2, prev);
			prev2 = prev;
			prev = cur;
		}

		return prev;
	}

    public int rob(int[] nums) {
		int n = nums.length;
		if(n == 1) return nums[0];
		
		ArrayList<Integer> arr1 = new ArrayList<>();
		ArrayList<Integer> arr2 = new ArrayList<>();

		for(int i = 0; i < n; i++){
			if(i != 0) arr1.add(nums[i]);
			if(i != n-1) arr2.add(nums[i]);
		}
		return Math.max(helperRobber(arr1), helperRobber(arr2));
    }
}