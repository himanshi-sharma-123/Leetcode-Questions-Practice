class Solution {
    public boolean isCycle(boolean vis[], boolean path[],List<List<Integer>> edges, int V){
        vis[V] = true;
        path[V] = true;

        for(int i:edges.get(V)){
            if(!vis[i]){
                if(isCycle(vis,path,edges,i)) return true;
            }else if(path[i]){
                return true;
            }
        }
        path[V] = false;
        return false;
    }
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> adj = new ArrayList<>();
        for(int i=0;i<=numCourses;i++){
            adj.add(new ArrayList<>());
        }

        for(int i=0;i<prerequisites.length;i++){
            int u = prerequisites[i][0];
            int v = prerequisites[i][1];
            adj.get(v).add(u);
        }

        boolean vis[] = new boolean[numCourses+1];
        boolean path[] = new boolean[numCourses+1];

        for(int i=1;i<=numCourses;i++){
            if(!vis[i]){
                if(isCycle(vis,path,adj,i)){
                    return false;
                }
            }
        }

        return true;
    }
}