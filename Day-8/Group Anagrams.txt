Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]


Explanation:
Let's go through the code step by step using the example input ["eat","tea","tan","ate","nat","bat"] to understand how it works.

Initializing Variables

We start by initializing an empty unordered map called mp (short for map), which will store the groups of anagrams.
Grouping Anagrams
We iterate through each word in the input vector strs. Let's take the first word, "eat", as an example.

Sorting the Word
We create a string variable called word and assign it the value of the current word ("eat" in this case).

Next, we sort the characters in word using the sort() function. After sorting, word becomes "aet".

Grouping the Anagram
We insert word as the key into the mp unordered map using mp[word], and we push the original word ("eat") into the vector associated with that key using mp[word].push_back(x), where x is the current word.

Since "aet" is a unique sorted representation of all the anagrams, it serves as the key in the mp map, and the associated vector holds all the anagrams.

Code:

class Solution {
  public List<List<String>> groupAnagrams(String[] strs) {

        HashMap<String,List<String>> map=new HashMap<>();

        List<List<String>> result = new ArrayList<>();


        for (String word: strs
        ) {
            char[] charArray = word.toCharArray();


            Arrays.sort(charArray);

            String sortedWord = String.valueOf(charArray);

            if (!map.containsKey(sortedWord)) {
                map.put(sortedWord, new ArrayList<>());
            }


            map.get(sortedWord).add(word);


        }
        result.addAll(map.values());

        return result;
    }
}

