Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.

Algorithm :
Pick a starting index for the current substring which is every index from 0 to n-2.
Now, pick the ending index for the current substring which is every index from i+1 to n-1.
Check if the substring from ith index to jth index is a palindrome.
If step 3 is true and length of substring is greater than maximum length so far, update maximum length and maximum substring.
Print the maximum substring.

Code : 

public class Solution {
    public String longestPalindrome(String s) {
        if (s.length() <= 1) {
            return s;
        }

        int maxLen = 1;
        String maxStr = s.substring(0, 1);

        for (int i = 0; i < s.length(); i++) {
            for (int j = i + maxLen; j <= s.length(); j++) {
                if (j - i > maxLen && isPalindrome(s.substring(i, j))) {
                    maxLen = j - i;
                    maxStr = s.substring(i, j);
                }
            }
        }

        return maxStr;
    }

    private boolean isPalindrome(String str) {
        int left = 0;
        int right = str.length() - 1;

        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }

        return true;
    }
}


Complexity Analysis
Time complexity : O(n^3). Assume that n is the length of the input string, there are a total of C(n, 2) = n(n-1)/2 substrings (excluding the trivial solution where a character itself is a palindrome). Since verifying each substring takes O(n) time, the run time complexity is O(n^3).

Space complexity : O(1).



APPROACH 2 : USING DP

public class Solution {
    public String longestPalindrome(String s) {
        if (s.length() <= 1) {
            return s;
        }

        int maxLen = 1;
        int start = 0;
        int end = 0;
        boolean[][] dp = new boolean[s.length()][s.length()];

        for (int i = 0; i < s.length(); ++i) {
            dp[i][i] = true;
            for (int j = 0; j < i; ++j) {
                if (s.charAt(j) == s.charAt(i) && (i - j <= 2 || dp[j + 1][i - 1])) {
                    dp[j][i] = true;
                    if (i - j + 1 > maxLen) {
                        maxLen = i - j + 1;
                        start = j;
                        end = i;
                    }
                }
            }
        }

        return s.substring(start, end + 1);
    }
}

Complexity Analysis
Time complexity : O(n^2). This gives us a runtime complexity of O(n^2).

Space complexity : O(n^2). It uses O(n^2) space to store the table.



THIS APPROACH IS FOR THE COUNT PALINDROMIC SUBSTRING

// public class Solution {
//     public String longestPalindrome(String s) {
//        boolean[][] dp = new boolean[s.length()][s.length()];
//        int len = 0;
//        for(int g=0;g<s.length();g++){
//            for(int i=0,j=g;j<s.length();i++,j++){
//               if(g==0){
//                   dp[i][j] = true;
//               }else if(g==1){
//                   if(s.charAt(i)==s.charAt(j)){
//                       dp[i][j] = true;
//                   }else{
//                       dp[i][j] = false;
//                   }
//               }else{
//                   if(s.charAt(i)==s.charAt(j) && dp[i+1][j-1]==true){
//                       dp[i][j] = true;
//                   }else{
//                       dp[i][j] = false;
//                   }
//               }

//               if(dp[i][j]){
//                   count++;
//               }
//            }
//        }

//     }

// }






