class Solution {
    public int climbStairs(int n) {
/************************* RECURSION ***********************/
        // if(n<=1){
        //     return n;
        // }

        // return climbStairs(n-1) + climbStairs(n-2);

/************************* MEMOIZATION ***********************/

    //   int dp[] = new int[n+1];

    //   Arrays.fill(dp,-1);

    //   if(n<=1){
    //     return n;
    //   }

    //   if(dp[n]!=-1){
    //     return dp[n];
    //   }

    //   return dp[n] = climbStairs(n-1) + climbStairs(n-2);

/************************* TABULATION ***********************/

    //   int dp[] = new int[n+1];

    //   if(n<=2){
    //     return n;
    //   }

    //   dp[0] = 1;
    //   dp[1] = 1;

    //   for(int i=2;i<n+1;i++){
    //     dp[i] = dp[i-1] + dp[i-2];
    //   }

    //   return dp[n];

/************************* SPACE OPTIMIZATION ***********************/

    int prev2 = 1;
    int prev = 1;

    if(n<=1){
        return n;
    }

    for(int i=2;i<n+1;i++){
        int curr = prev2 + prev;
        prev2 = prev;
        prev = curr;

    }

    return prev;

    }
}