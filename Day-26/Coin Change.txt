class Solution {
    public int solution(int[] coins, int index, int amount){

    int dp[][] = new int[index+1][amount+1];
    for(int i=0; i<=amount; i++){
        if(i%coins[0] == 0)  
            dp[0][i] = i/coins[0];
        else dp[0][i] = (int)Math.pow(10,9);
    }

    for(int ind = 1; ind<index+1; ind++){
        for(int target = 0; target<=amount; target++){
            
            int notTake = 0 + dp[ind-1][target];
            int take = (int)Math.pow(10,9);
            if(coins[ind]<=target)
                take = 1 + dp[ind][target - coins[ind]];
                
             dp[ind][target] = Math.min(notTake, take);
        }
    }
    
    int ans = dp[index+1-1][amount];
    if(ans >=(int)Math.pow(10,9)) return -1;
    return ans;
}
    
    public int coinChange(int[] coins, int amount) {
        int index = coins.length;
        int ans = solution(coins,index-1,amount);
        return ans;


    // public int solve(int[] coins, int ind, int amount){

    //     if(ind==0){
    //         if(amount%coins[ind]==0){
    //             return amount/coins[ind];
    //         }else{
    //             return (int)1e9;
    //         }
    //     }

    //     int notTake = 0 + solve(coins,ind-1,amount);
    //     int take = Integer.MAX_VALUE;

    //     if(coins[ind]<=amount){
    //         take = 1 + solution(coins,ind,amount-coins[ind]);
    //     }

    //     return Math.min(take,notTake);
    // }
    // public int coinChange(int[] coins, int amount) {
    //     int index = coins.length-1;
    //     int ans = solve(coins,index,amount);
    //     return ans;
    }
}