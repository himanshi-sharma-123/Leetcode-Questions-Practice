Explanation of Problem:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Approach 1 : Using 2 For loops

TC: O(N^2)

class Solution {
    public int maxProfit(int[] prices) {
       int n = prices.length;
       int max = 0;

       for(int i=0;i<n;i++){
           for(int j=i+1;j<n;j++){
               if(prices[i]<prices[j]){
                  int curr = prices[j]-prices[i];
                  max = Math.max(max,curr);
               }
           }
       }

       return max;
    }
}

Approach 2 : Using 1 For loop

TC : O(n)

class Solution {
    public int maxProfit(int[] prices) {
        int n= prices.length;
        int ans =0;
        int min =prices[0];
        int max = 0;
       
        for(int i=1;i<n;i++){
            if(prices[i] < min){
                min = prices[i];

            }
            else if(prices[i]-min>max){
                max = prices[i]-min;
            }
            
        }
        
         ans = max;
        return ans;

    }
}

