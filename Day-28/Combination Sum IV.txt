class Solution {
    public int combinationSum4(int[] nums, int target) {
        return solve(0,nums,target);
    }

    public int solve(int idx,int[] nums, int target){
        if(target==0){
            return 1;
        }

        if(idx>=nums.length || target<0){
            return 0;
        }

        int take = solve(0,nums,target-nums[idx]);
        int notTake = solve(idx+1,nums,target);

        return take + notTake;

    }
}
// class Solution {
//     public int combinationSum4(int[] nums, int target) {
//         int memo[][] = new int[nums.length][target+1];
//         for(int []row : memo){
//             Arrays.fill(row,-1);
//         }
//         return solve(0,nums,target,memo);
//     }

//     public int solve(int idx,int[] nums, int target,int memo[][]){
//         if(target==0){
//             return 1;
//         }

//         if(idx>=nums.length || target<0){
//             return 0;
//         }

//         if(memo[idx][target]!=-1){
//             return memo[idx][target];
//         }

//         int take = solve(0,nums,target-nums[idx],memo);
//         int notTake = solve(idx+1,nums,target,memo);

//         return memo[idx][target] = take + notTake;

//     }
// }


