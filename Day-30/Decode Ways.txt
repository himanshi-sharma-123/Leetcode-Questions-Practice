// class Solution {
//     public int numDecodings(String s) {
//         int n = s.length();
//         return solve(0,s,n);
//     }

//     public int solve(int i, String s, int n){
//         if(i==n){
//             return 1;
//         }

//         if(s.charAt(i)=='0'){
//             return 0;
//         }

//         int result = solve(i+1,s,n);

//         if(i+1<n){
//             if(s.charAt(i)=='1' || (s.charAt(i)=='2' && s.charAt(i+1)<='6')){
//                 result += solve(i+2,s,n);
//             }
//         }

//         return result;
//     }
// }

//////////////////////////  MEMOIZATION ////////////////////

// class Solution {
//     public int numDecodings(String s) {
//         int n = s.length();
//         int memo[] = new int[n+1];
//         Arrays.fill(memo,-1);
//         return solve(0,s,n,memo);
//     }

//     public int solve(int i, String s, int n,int[] memo){
//         if(memo[i]!=-1){
//             return memo[i];
//         }

//         if(i==n){
//             return memo[i] = 1;
//         }

//         if(s.charAt(i)=='0'){
//             return memo[i] = 0;
//         }

//         int result = solve(i+1,s,n,memo);

//         if(i+1<n){
//             if(s.charAt(i)=='1' || (s.charAt(i)=='2' && s.charAt(i+1)<='6')){
//                 result += solve(i+2,s,n,memo);
//             }
//         }

//         return memo[i] = result;
//     }
// }

////////////////////////////  DP ///////////////////////////////

class Solution {
    public int numDecodings(String s) {
        int n = s.length();
        int dp[] = new int[n+1];
        Arrays.fill(dp,0);
        dp[n] = 1;

        for(int i=n-1;i>=0;i--){
            if(s.charAt(i)=='0'){
                dp[i] = 0;
            }else{
                dp[i] = dp[i+1];
                
                if(i+1<n){
                if(s.charAt(i)=='1' || (s.charAt(i)=='2' && s.charAt(i+1)<='6')){
                    dp[i] += dp[i+2];
                }
                }
            }
        }
        return dp[0];
    }
}


