class Solution {
    // public int solve(int ind, int prevI, int[] nums){
    public int solve( int[] arr, int n){

            int dp[][]=new int[n+1][n+1];
    
    for(int ind = n-1; ind>=0; ind --){
        for (int prev_index = ind-1; prev_index >=-1; prev_index --){
            
            int notTake = 0 + dp[ind+1][prev_index +1];
    
            int take = 0;
    
            if(prev_index == -1 || arr[ind] > arr[prev_index]){
                
                take = 1 + dp[ind+1][ind+1];
            }
    
            dp[ind][prev_index+1] = Math.max(notTake,take);
            
        }
    }
    
    return dp[0][0];

        // int n  = nums.length;
        // int dp[][] = new int[n][n+1];
        // for (int[] row : dp) {
        //     Arrays.fill(row, -1);
        // }
        // if(ind==n) return 0;

        // if(dp[ind][prevI+1]!=-1) return dp[ind][prevI+1];

        // int len = 0 + solve(ind+1,prevI,nums);

        // if(prevI==-1 || nums[ind]>nums[prevI]){
        //     len = Math.max(len, 1+solve(ind+1,ind,nums));
        // }

        // return dp[ind][prevI+1] = len;
    }
    public int lengthOfLIS(int[] nums) {
        return solve(nums,nums.length);
    }
}