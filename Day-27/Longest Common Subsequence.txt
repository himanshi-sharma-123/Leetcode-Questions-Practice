//************************** MEMOIZATION ***************************************** */

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int dp[][] = new int[text1.length()][text2.length()];
        for (int rows[] : dp)
            Arrays.fill(rows, -1);


        return solve(text1.length()-1, text2.length()-1,text1,text2,dp);
    }

    public int solve(int ind1,int ind2, String text1, String text2, int[][] dp){
        if(ind1<0 || ind2<0){
            return 0;
        }

        if (dp[ind1][ind2] != -1)
            return dp[ind1][ind2];



        if(text1.charAt(ind1)==text2.charAt(ind2)){
            return dp[ind1][ind2] = 1 + solve(ind1 - 1, ind2 - 1,text1,text2, dp);
        }

        else
            return dp[ind1][ind2] = Math.max(solve(ind1, ind2 - 1,text1,text2, dp),
                    solve(ind1 - 1, ind2,text1,text2, dp));
    }
}
//************************** RECURSION**************************** */
// class Solution {
//     public int longestCommonSubsequence(String text1, String text2) {
//         return solve(text1.length()-1, text2.length()-1,text1,text2);
//     }

//     public int solve(int ind1,int ind2, String text1, String text2){
//         if(ind1<0 || ind2<0){
//             return 0;
//         }

//         int match = 0;
//         int notMatch = 0;

//         if(text1.charAt(ind1)==text2.charAt(ind2)){
//             match = 1 + solve(ind1-1,ind2-1,text1,text2);
//         }

//         notMatch = 0 + Math.max(solve(ind1-1,ind2,text1,text2),solve(ind1,ind2-1,text1,text2));

//         return Math.max(match,notMatch);
//     }
// }